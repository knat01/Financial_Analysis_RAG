Overall Plan & Structure (Side Project)
The application will be a web-based tool for analyzing a company's financial data and generating insights using natural language processing. It will focus on providing key financial metrics and insights about a company based on user-provided ticker symbols.
Flow (Interactive Insights Platform)
User Interaction (Ticker Input):
app.py:
The user enters the ticker symbol of a company (e.g., "AAPL", "MSFT").
Data Fetching (Financial Metrics):
data_processing.py:
The app fetches financial data (income statement, balance sheet, cash flow) for the chosen company using the Alpha Vantage API and the user-provided ticker symbol.
Data Processing (Metrics and Charts):
data_processing.py:
The fetched data is processed to extract key metrics (e.g., gross profit margin, net profit margin, current ratio, debt-to-equity ratio, operating cash flow margin).
Charts are generated using Plotly:
Bar chart for historical trends in revenue.
Donut chart for asset composition.
Insight Generation (Financial Metrics):
data_processing.py:
The app sends prompts to OpenAI (gpt-3.5-turbo) to generate insightful summaries about the financial metrics and charts.
Prompts are structured to focus on specific aspects (e.g., "Analyze the company's revenue health based on its recent revenue growth and profitability.").
User Interaction (Optional - Annual Report Upload):
app.py:
The user can optionally upload an annual report in PDF format (this is optional for a simplified version).
Document Processing & Indexing (Annual Report - Optional):
report_analysis.py:
If the user uploads a report, this section processes the PDF, extracts text, splits it into chunks, creates embeddings, and stores them in a vector database using LlamaIndex.
User Interaction (Question - Optional):
app.py:
If an annual report was uploaded, the user enters a question about the report.
Question Retrieval & Insight Generation (Annual Report - Optional):
report_analysis.py:
The user's question is sent to the vector database for similarity search.
Relevant chunks of text are retrieved.
The retrieved text and the user's question are formatted into a prompt for OpenAI.
The OpenAI model generates an insightful answer based on the context.
Output Display (Combined Insights):
app.py:
The insights from both the financial metrics analysis and the annual report analysis (if available) are displayed to the user.
The UI might include:
Tabs for financial metrics and annual report insights (if available).
Interactive elements to explore the data further (e.g., drill down into specific metrics or charts).
File Organization
app.py (Main Application File):
Contains Streamlit UI setup, API key handling, ticker input, file upload (optional), question input (optional), and output display.
Calls functions from data_processing.py and report_analysis.py to handle the core logic.
data_processing.py:
Houses all functions related to fetching financial data from Alpha Vantage, processing that data into metrics and charts, and generating insights about the financial metrics.
report_analysis.py:
Contains functions for processing annual reports (if uploaded), creating embeddings, building a vector database, and generating insights from the annual report using OpenAI.
Key Technologies
Streamlit: Web app framework for building the UI.
Alpha Vantage API: Provides financial metrics data.
pypdf: Library for reading and extracting text from PDF files (used only if an annual report is uploaded).
LangChain: For text splitting, embedding, and prompt construction (used only for annual report analysis).
OpenAIEmbeddings: For generating embeddings of text chunks (used only for annual report analysis).
LlamaIndex: For indexing the annual report and retrieving relevant information using vector search (used only for annual report analysis).
OpenAI: For generating insightful answers using the GPT models (gpt-3.5-turbo).
Plotly: Interactive charting library.
File Names
app.py
data_processing.py
report_analysis.py